# Exercise 1.2.5
# Q1: How many rows are in penguins? How many columns?
glimpse(penguins)
#A: (Rows: 344, Columns:8)
# Q2: What does the bill_depth_mm variable in the penguins data frame describe? 
penguins?
# A: The bill_depth_mm variable in the dataset is a number thhat denotes penguin bill depth measured in milimeters 
# Q3: Make a scatterplot of bill_depth_mm vs. bill_length_mm. That is, make a scatterplot with bill_depth_mm on the y-axis and bill_length_mm on the x-axis. Describe the relationship between these two variables.
ggplot(
  data = penguins,
  mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
  geom_point()
#A: There apears to be a positive relationship between the two variables but the strength is not salient.
# Q4: What happens if you make a scatterplot of species vs. bill_depth_mm? What might be a better choice of geom?
ggplot(
  data = penguins,
  mapping = aes(x = bill_depth_mm, y = species)
) +
  geom_point()
# A: It would be easier to visualize the data using a density plot with different color lines to show the species. (Example shown below)
penguins |> 
  ggplot(#data = penguins,
         mapping = aes(x = bill_depth_mm,
                       colour = species)) +
  geom_density(linewidth = 2)
# Q5: Why does the following give an error and how would you fix it?
#A: The code gives an error related to the labeling of the x and y axis information. To fix you would use this code.
penguins |> 
  ggplot(mapping = aes(x = bill_depth_mm,
                       y = body_mass_g)) + 
  geom_point()

6.
>What does the `na.rm` argument do in `geom_point()`?
>What is the default value of the argument?
Create a scatterplot where you successfully use this argument set to `TRUE`.

There are missing data points (either on the x or the y) so gives a warning in the console along with the plotted chart:

>Warning message:
Removed 2 rows containing missing values (`geom_point()`).

It is saying that the missing value data is dropped.

Adding `na.rm = TRUE` into the `geom_point()` removes these missing value data poins and so there is no longer a warning printed in the console.

The default value of `na.rm =` is `FALSE`.

```{r}
penguins |> 
  ggplot(mapping = aes(x = bill_depth_mm,
                       y = body_mass_g)) + 
  geom_point(na.rm = TRUE)
```

7.
>Add the following caption to the plot you made in the previous exercise: "Data come from the palmerpenguins package." 
Hint: Take a look at the documentation for `labs()`.

```{r}
penguins |> 
  ggplot(mapping = aes(x = bill_depth_mm,
                       y = body_mass_g)) + 
  geom_point(na.rm = TRUE) + 
  labs(caption = "Data come from the palmerpenguins package.")
```

8.
>Recreate the following visualization.
What aesthetic should `bill_depth_mm` be mapped to?
And should it be mapped at the global level or at the geom level?

Mapped to the geom_level:

```{r}
penguins |> 
  ggplot(mapping = aes(x = flipper_length_mm,
                       y = body_mass_g)) + 
  geom_point(aes(colour = bill_depth_mm),
             na.rm = TRUE) +
  geom_smooth(na.rm = TRUE)

```

But mapping to the global level gives a warning as the colour is also being applied to the `geom_smooth`and subsequently gets dropped:

```{r}
penguins |> 
  ggplot(mapping = aes(x = flipper_length_mm,
                       y = body_mass_g,
                       colour = bill_depth_mm)) + 
  geom_point(na.rm = TRUE) +
  geom_smooth(na.rm = TRUE)

```

9.
Run this code in your head and predict what the output will look like. 
Then, run the code in R and check your predictions.

The chart will have dots with flipper length along the bottom and body mass along the side. 
The dots will be coloured by the islands and there will be as many curvy lines as there are distinct islands but with no grey extensions/bits to the lines.

```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)
) +
  geom_point() +
  geom_smooth(se = FALSE)
```


10. 
Will these two graphs look different? Why/why not?

They are the same because the first has the data and `aes()` which will be available to the `geom()` functions. 
The second is a repetition of the code leaving the global `ggplot()` empty but giving the same chart.

```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point() +
  geom_smooth()

ggplot() +
  geom_point(
    data = penguins,
    mapping = aes(x = flipper_length_mm, y = body_mass_g)
  ) +
  geom_smooth(
    data = penguins,
    mapping = aes(x = flipper_length_mm, y = body_mass_g)
  )
```

## [2.4.3](https://r4ds.hadley.nz/data-visualize.html#exercises-1) {.unnumbered}

#1.4.3
install.packages("palmerpenguins")

library(palmerpenguins)

library(ggplot2)

View(penguins)

ggplot(data = penguins,aes(y = species))+ geom_bar()

#The plot appears to be 'flipped' so the species are appearing on the left side (y axis).

ggplot(penguins, aes(x = species)) + geom_bar(color = "red")

ggplot(penguins, aes(x = species)) + geom_bar(fill = "red")

#The command "fill" is more useful for changing the color of bars.

ggplot(penguins, aes(x = body_mass_g)) + geom_histogram(binwidth = 20)

#Bins represents the number of "buckets" that data is cut into. The bins

argument of the geom_histogram() function to manually set the number

of bars, cells, or bins the whole histogram will be divided into.

install.packages("tidyverse")

library(tidyverse)

ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.40)

ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.30)

ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.20)

ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.1)

#The 0.1 binwidth is the one the reveals the most interesting patterns.

#1.5.5
#Q1
library(tidyverse)
?mpg
glimpse(mpg)
#There are 7 categorical variables, which are manufacturer, model, year, trans, drv, fl and class.
#There are 4 numerical variables, which are displ, cyl, cty, and hwy

#Q2
#(a)
ggplot(mpg, aes(x = hwy, y = displ)) +
geom_point()

#with numerical variable
#(1) with color
ggplot(mpg, aes(x = hwy, y = displ,color = cty)) +
  geom_point()
#(2) with size
ggplot(mpg, aes(x = hwy, y = displ,size = cty)) +
  geom_point()
#(3) color and size
ggplot(mpg, aes(x = hwy, y = displ,color = cty, size = cty)) +
  geom_point()
#(4) shape
#countinuous variable cannot be mapped based on shape, an error message will show

#with categorical variable
#(1) with color
ggplot(mpg, aes(x = hwy, y = displ,color = model)) +
  geom_point()
#(2) with size
ggplot(mpg, aes(x = hwy, y = displ,size = model)) +
  geom_point()
#(3) color and size
ggplot(mpg, aes(x = hwy, y = displ,color = model, size = model)) +
  geom_point()
#(4) shape
ggplot(mpg, aes(x = hwy, y = displ,color = cty, shape = model)) +
  geom_point()

#With numerical variables, we can always see gradual changes in colors (from azure to navy blue) or sizes (from small to big) of the data point.
#However, with categorical variables, there is no gradual changes, and the graph becomes more colorful since there are more "categories." Also, using "size" function does not tell much information, since the data points clutter together. R will also show warning messages for using categorical variables for featuring sizes and shapes. 

#Q3
ggplot(mpg, aes(x = hwy, y = displ)) +
  geom_point(aes(linewidth = cty))
#It seems like the linewidth function is ignored

#Q4
ggplot(mpg, aes(x = hwy, y = displ,size = hwy, color = hwy)) +
  geom_point()
#The graph can be produced if we map the same variable to multiple aesthetics. However, the information this graph can tell is limited. This is because the size and color of the data points solely change accordingly to the value of hwy. 


#Q5
library(palmerpenguins)
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +
  geom_point()
#Adding coloring by species reveal the positive relationship between these two variables. The intensity of such positive relationship vary by species.

#faceting by species
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) +
  geom_point() +
  facet_wrap(~species)


#Q6
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, color = species, shape = species)) +
  geom_point()
#There were two legends because the function "labs," which means "labels," added one additional legend. 

#1.6.1 
1.
> Run the following lines of code. Which of the two plots is saved as `mpg-plot.png`? 
Why?

```{r}
#| eval: false
ggplot(mpg, aes(x = class)) +
  geom_bar()
ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_point()
ggsave("mpg-plot.png")
```

The second code is saved because it was the last code run.

2.
> What do you need to change in the code above to save the plot as a PDF instead of a PNG? 
How could you find out what types of image files would work in `ggsave()`?

To save as a pdf the code needs to be changed from `.png` to `.pdf`:

```{r}
#| eval: false
ggsave("mpg-plot.pdf")
```
