# Exercise 3.2.5
library(nycflights13)
library(tidyverse)
# Q1: In a single pipeline for each condition, find all flights that meet the condition:

# Had an arrival delay of two or more hours
filter(flights, arr_delay >= 120)

# Flew to Houston (IAH or HOU)
filter(flights, dest == "IAH" | dest == "HOU

# Were operated by United, American, or Delta
filter(flights, carrier %in% c("AA", "DL", "UA"))

# Departed in summer (July, August, and September)
filter(flights, month >= 7, month <= 9)

# Arrived more than two hours late, but didn’t leave late
filter(flights, arr_delay > 120, dep_delay <= 0)

# Were delayed by at least an hour, but made up over 30 minutes in flight
filter(flights, dep_delay >= 60, dep_delay - arr_delay > 30)

# Q2: Sort flights to find the flights with the longest departure delays. Find the flights that left earliest in the morning.
arrange(flights, desc(dep_delay))
arrange(flights, dep_delay)

#Q3: Sort flights to find the fastest flights. (Hint: Try including a math calculation inside of your function.)
flights %>% mutate(travel_time = ifelse((arr_time - dep_time < 0), 
                                        2400+(arr_time - dep_time),
                                        arr_time - dep_time)) %>% 
  arrange(travel_time) %>% select(arr_time, dep_time, travel_time)

# Q4: Was there a flight on every day of 2013?
# A: Yes

# Q5: Which flights traveled the farthest distance? Which traveled the least distance?
arrange(flights, (distance))
arrange(flights, desc(distance))

# Q6: Does it matter what order you used filter() and arrange() if you’re using both? Why/why not? Think about the results and how much work the functions would have to do.
# Yes, if you filter first then there is less work since fewer items are being arranged. If you arrange before filtering, the function will have to do more work.

#Exercise 3.3.5
#Q1
flights |> 
  select(dep_time, sched_dep_time, dep_delay)
#dep_time equals to the sum of sched_dep_time and dep_delay

#Q2
flights |> 
  select(dep_time, dep_delay, arr_time, arr_delay)

flights |> 
  select(starts_with("dep_"), starts_with("arr_"))

#Q3
flights |> select(month)
flights |> select(month, month, month)

#If you specify the name of the same variable multiple times, it brings up the specified variable only once.

#Q4
?any_of

#The any_of function selects variables contained in a character vector.

variables <- c("year", "month", "day", "dep_delay", "arr_delay")
flights |> select(any_of(variables))

#The any_of function can help with this vector because it selects all variables contained in it, which can help shorthand codes involving these variables

#Q5
flights |> select(contains("TIME"))

#Considering the fact that R can be case sensitive, the result of this code was surprising. 
#The select helpers will select any variable containing the specified characters no matter their case.

flights |> select(contains("time"))

#Q6
flights |> rename(air_time_min=air_time) |> relocate(air_time_min)

#Q7
flights |> 
  select(tailnum) |> 
  arrange(arr_delay)
#> Error in `arrange()`:
#> ℹ In argument: `..1 = arr_delay`.
#> Caused by error:
#> ! object 'arr_delay' not found

#This command doesn't work because tailnum is a string variable, not a numeric one.

#Exercise 3.5.7

#Q1
#There are 16 carriers, 3 origin airports, and 105 destination airports in this dataset. For many destination airports, there are only one or two carriers that fly there, so it is difficult to tell how much of the delay is due to the carrier, and how much is due to the airport. We also can't necessarily tell how much of the delay is due to the route, versus the airport itself. This makes attributing the cause of in flight delays difficult.

flights |>
  group_by(carrier, dest) |>
  summarize(avg_delay = mean(dep_delay, na.rm = TRUE)) |>
  arrange(desc(avg_delay))

#Q2
flights |>
  filter(dep_delay > 0) |>
  group_by(dest) |> 
  slice_max(dep_delay, n = 1) |> 
  relocate(dest)

#Q3
flights |>
  ggplot(aes(x = dep_time, y = dep_delay, na.rm = TRUE)) +
  geom_point()

#Q4
#Supplying a negative n value to slice_min() and its counterparts (slice_max(), slice_head(), slice_tail(), etc.) in the R programming language, specifically in the context of dplyr or similar packages, can lead to unintended or undefined behavior. These functions are designed to select rows with the highest or lowest values in a column (for slice_max() and slice_min(), respectively), or to select rows from the beginning or end of a dataset (for slice_head() and slice_tail(), respectively).

slice_min(flights, n=-1, order_by=year)

#Q5
#The count command counts the number of flights in each month whereas the sort command also arranges it in descending order.

count(flights,month)
count(flights,month,sort=TRUE)

#Q6
df <- tibble(
  x = 1:5,
  y = c("a", "b", "a", "a", "b"),
  z = c("K", "K", "L", "L", "K"))


#A)	group_by(df,y) it was similar to how I’d envisioned it.
#B)	arrange(df,y) it was similar to how I’d envisioned it.
#C)	group_by(df, y, summarize(df, mean_x = mean(x)))group_by(df, y, z, summarize(df, mean_x = mean(x)))
#D)	group_by(df,y, z, summarize(df,mean_x = mean(x), .groups = "drop")) 
#E)	 group_by(df,y, z, summarize(df,mean_x = mean(x)))
 group_by(df, y, z, mutate(df,mean_x = mean(x))) 
# the summarize command creates a new data frame whereas mutate creates new columns within the existing data frame.






